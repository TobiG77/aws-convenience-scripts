#!/usr/bin/env bash

set -e

BACKUP_DIR=$HOME/.aws/backup
BACKUP_CONFIG=${BACKUP_DIR}/config
BACKUP_CREDS=${BACKUP_DIR}/credentials

abort_on_error() {

	echo -e "$@" 1>&2
	exit 1

}

print_help() {

cat <<-EOT

This script modifies ~/.aws/config and ~/.aws/credentials to enable tools that do not natively support aws profiles
The default mode of this script is to modify the file structure in ~/.aws to persist a specific profile.

Supported switches are:

-h or --help    : Prints this help.

-l or --list    : List available profiles

-c or --convert : to amend your aws configuration for use with this script,
                  Please note, this flag requires to also use the --profile switch, see below.

-s or --switch  : the name of the profile to activate,
                  Please note, the profile has to be present in your current aws configuration
                  in order to select it.

-r or --restore : this will undo the modifications of your aws configuration into its original state

-1 or --one-shot: This switch will run
                  1) --convert and --profile activating your selected profile
                  2) Execute any command you\'ve added post --
                  3) Run --restore undoing the modifications

EOT

exit 0

}

first_run_help() {

cat <<-EOT

Your files in ~/.aws/ have not yet been modified to work with this script.
Please run --help first if you need more information.

EOT

exit 0

}


backup_aws_configuration() {

    echo "Creating backup of AWS configuration ..."

    mkdir -p $HOME/.aws/backup

    if [ ! -e "$HOME/.aws/config" -a -e "$BACKUP_CONFIG" ]
    then
        echo "No source file present, but backup of AWS config exists!"
    elif [ -e "$HOME/.aws/config" -a -e "$BACKUP_CONFIG" ]
    then
        if [ "$FORCE" == "true" ]
        then
            echo "Forcing backup of AWS config over existing backup"
            mv -v --backup=numbered $HOME/.aws/config $BACKUP_CONFIG
        else
            echo "Existing config backup in place and --force was not specified, skipping"
        fi
    elif [ -e "$HOME/.aws/config" -a ! -e "$BACKUP_CONFIG" ]
    then
        mv -v --backup=numbered $HOME/.aws/config $BACKUP_CONFIG
    elif [ ! -e "$HOME/.aws/config" -a ! -e "$BACKUP_CONFIG" ]
    then
        abort_on_error "Neither AWS config or AWS config backup present."
     else
        abort_on_error "Logic error, please report as a bug"
    fi

    if [ ! -e "$HOME/.aws/credentials" -a -e "$BACKUP_CREDS" ]
    then
        echo "No source file present, but backup of AWS credentials exists!"
    elif [ -e "$HOME/.aws/credentials" -a -e "$BACKUP_CREDS" ]
    then
        if [ "$FORCE" == "true" ]
        then
            echo "Forcing backup of AWS credentials over existing backup"
            mv -v --backup=numbered $HOME/.aws/credentials $BACKUP_CREDS
        else
            echo "Existing credentials backup in place and --force was not specified, skipping"
        fi
    elif [ -e "$HOME/.aws/credentials" -a ! -e "$BACKUP_CREDS" ]
    then
        mv -v --backup=numbered $HOME/.aws/credentials $BACKUP_CREDS
    elif [ ! -e "$HOME/.aws/credentials" -a ! -e "$BACKUP_CREDS" ]
    then
        abort_on_error "Neither AWS credentials or AWS credentials backup present."
     else
        abort_on_error "Logic error, please report as a bug"
    fi

}

restore_aws_configuration() {

    echo "Restoring AWS configuration backup"

    [ -e $BACKUP_CONFIG ] || abort_on_error "Expected to find $BACKUP_CONFIG"
    mv -v --backup=numbered $BACKUP_CONFIG $HOME/.aws

    [ -e $BACKUP_CREDS ] || abort_on_error "Expected to find $BACKUP_CREDS"
    mv -v --backup=numbered $BACKUP_CREDS $HOME/.aws

}

activate_aws_profile() {

    echo "Activating profile: $PROFILE ..."

    if [ "$PROFILE" == "default" ]
    then
        profile_match="default"
    else
        profile_match="profile ${PROFILE}"
    fi

    grep -q "^\[${profile_match}\]$" $BACKUP_CONFIG || abort_on_error "The AWS config backup does not have the specified profile!"
    grep -q "^\[${PROFILE}\]$" $BACKUP_CREDS || abort_on_error "The AWS credential backup does not have the specified profile!"

#ToDo: gracefully handle multiple profile sections
#    sed '$ d' | \
    cat $BACKUP_CONFIG | \
    sed -n "/^\[${profile_match}\]$/,/profile/p" | \
    sed "s|^\[${profile_match}|\[default|g" \
    > $HOME/.aws/config

#ToDo: gracefully handle multiple profile sections
#    sed '$ d' | \
    cat $BACKUP_CREDS | \
    sed -n "/^\[${PROFILE}\]$/,/^\[/p" | \
    sed "s|^\[${PROFILE}|\[default|g" \
    > $HOME/.aws/credentials

}

list_profiles() {

    echo "Available AWS profiles:"
    egrep "^\[(default|profile)" $BACKUP_CONFIG | sed -e 's|\[profile ||g' -e 's|\]||g'

}

[ "`type source`" == "source is a shell builtin" ] || abort_on_error "This script is written for Bash!"

OPTS=`getopt -o s:h1rcfdl --long switch:,help,one-shot,restore,convert,force,debug,list -n 'parse-options' -- "$@"`

[ $? == 0 ] || abort_on_error "Failed parsing options."

eval set -- $OPTS

while true; do
  case "$1" in
    -c | --convert ) CONVERT=true ;;
    -f | --force ) FORCE=true ;;
    -1 | --one-shot ) CONVERT=true ; ONESHOT=true ; RESTORE=true ;;
    -r | --restore ) RESTORE=true ;;
    -s | --switch ) PROFILE="$2";;
    -h | --help ) print_help ;;
    -d | --debug ) DEBUG=true ;;
    -l | --list ) list_profiles ; exit 0 ;;
    -- ) REMAINING_ARGS="$@" ; break ;;
  esac
  shift
done

if [ "$OPTS" == " --" ]
then
    print_help
    exit 0
fi

echo "Remaining arguments: ${REMAINING_ARGS}"

[ "$DEBUG" == true ] && set -x

if test ! -e "$BACKUP_CONFIG"
then
    test "$CONVERT" == true || test "$ONESHOT" == true || first_run_help
fi

[ "$CONVERT" == true ] && backup_aws_configuration
[ -n "$PROFILE" ] && activate_aws_profile
[ "$ONESHOT" == true ] && run_additional_args
[ "$RESTORE" == true ] && restore_aws_configuration

/bin/true

